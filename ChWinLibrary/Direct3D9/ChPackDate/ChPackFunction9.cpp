
#include<Windows.h>
#include"../../BaseIncluder/ChBase.h"

#include"../../BaseIncluder/ChD3D9I.h"

///////////////////////////////////////////////////////////////////////////////////
//ChVector4Operator//
///////////////////////////////////////////////////////////////////////////////////

ChVec4::operator const D3DXVECTOR4()const
{
	D3DXVECTOR4 tmpVec;

	tmpVec.x = x;
	tmpVec.y = y;
	tmpVec.z = z;
	tmpVec.w = w;

	return tmpVec;
}

///////////////////////////////////////////////////////////////////////////////////

ChVec4::operator const D3DXVECTOR4*()const
{
	return reinterpret_cast<D3DXVECTOR4*>(const_cast<ChVec4*>(this));
}

///////////////////////////////////////////////////////////////////////////////////

ChVec4& ChVec4::operator= (const D3DXVECTOR4& _vec)
{
	x = _vec.x;
	y = _vec.y;
	z = _vec.z;
	w = _vec.w;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////
//ChVector3Operator//
///////////////////////////////////////////////////////////////////////////////////

ChVec3::operator const D3DXVECTOR3()const
{
	D3DXVECTOR3 tmpVec;

	tmpVec.x = x;
	tmpVec.y = y;
	tmpVec.z = z;

	return tmpVec;
}

///////////////////////////////////////////////////////////////////////////////////

ChVec3::operator const D3DXVECTOR3*()const
{
	return reinterpret_cast<D3DXVECTOR3*>(const_cast<ChVec3*>(this));
}

///////////////////////////////////////////////////////////////////////////////////

ChVec3& ChVec3::operator= (const D3DXVECTOR3& _vec)
{
	x = _vec.x;
	y = _vec.y;
	z = _vec.z;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////

ChVec3& ChVec3::operator= (const D3DXQUATERNION& _qua)
{
	D3DXMATRIX tmpMat;
	D3DXVECTOR3 tmpVec;

	D3DXMatrixRotationQuaternion(&tmpMat, &_qua);

	auto tmp = D3DXVECTOR3(0.0f, 0.0f, 1.0f);

	D3DXVec3TransformNormal(&tmpVec, &tmp, &tmpMat);

	*this = tmpVec;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////

ChVec3& ChVec3::operator= (const D3DXMATRIX& _mat)
{
	x = _mat._41;
	y = _mat._42;
	z = _mat._43;

	return *this;

}

///////////////////////////////////////////////////////////////////////////////////
//ChVector2Operator//
///////////////////////////////////////////////////////////////////////////////////

ChVec2::operator const D3DXVECTOR2()const
{
	D3DXVECTOR2 tmpVec;

	tmpVec.x = x;
	tmpVec.y = y;

	return tmpVec;
}

///////////////////////////////////////////////////////////////////////////////////

ChVec2::operator const D3DXVECTOR2*()const
{
	return reinterpret_cast<D3DXVECTOR2*>(const_cast<ChVec2*>(this));
}

///////////////////////////////////////////////////////////////////////////////////

ChVec2& ChVec2::operator= (const D3DXVECTOR2& _vec)
{
	x = _vec.x;
	y = _vec.y;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////
//ChQuaternionOperator//
///////////////////////////////////////////////////////////////////////////////////

ChQua::operator const D3DXQUATERNION()const
{
	ChQua_9 tmpQua;
	tmpQua.x = x;
	tmpQua.y = y;
	tmpQua.z = z;
	tmpQua.w = w;

	return tmpQua;
}

///////////////////////////////////////////////////////////////////////////////////

ChQua::operator const D3DXQUATERNION*()const
{
	return reinterpret_cast<D3DXQUATERNION*>(const_cast<ChQua*>(this));
}

///////////////////////////////////////////////////////////////////////////////////

ChQua& ChQua::operator= (const D3DXQUATERNION& _qua)
{
	x = _qua.x;
	y = _qua.y;
	z = _qua.z;
	w = _qua.w;
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////

ChQua& ChQua::operator= (const D3DXVECTOR3& _vec)
{
	ChQua_9 tmpQua = _vec;
	*this = tmpQua;
	return *this;

}

///////////////////////////////////////////////////////////////////////////////////

ChQua& ChQua::operator= (const D3DXMATRIX& _mat)
{

	ChQua_9 tmpQua = _mat;
	*this = tmpQua;
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////
//ChMatrixOperator//
///////////////////////////////////////////////////////////////////////////////////

ChLMat::operator const D3DXMATRIX()const
{
	ChMat_9 tmpMat;
	for (unsigned char i = 0; i < 4; i++)
	{
		for (unsigned char j = 0; j < 4; j++)
		{
			tmpMat.m[i][j] = m[i][j];
		}
	}

	return tmpMat;
}

///////////////////////////////////////////////////////////////////////////////////

ChLMat::operator const D3DXMATRIX*()const
{
	return reinterpret_cast<D3DXMATRIX*>(const_cast<ChLMat*>(this));
}

///////////////////////////////////////////////////////////////////////////////////

ChLMat& ChLMat::operator= (const D3DXQUATERNION& _qua)
{
	ChMat_9 tmpMat = _qua;
	*this = tmpMat;
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////

ChLMat& ChLMat::operator= (const D3DXVECTOR3& _vec)
{
	ChMat_9 tmpMat = _vec;
	*this = tmpMat;
	return *this;

}

///////////////////////////////////////////////////////////////////////////////////

ChLMat& ChLMat::operator= (const D3DXMATRIX& _mat)
{


	for (unsigned char i = 0; i < 4; i++)
	{
		for (unsigned char j = 0; j < 4; j++)
		{
			m[i][j] = _mat.m[i][j];
		}
	}

	return *this;
}
